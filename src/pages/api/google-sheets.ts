// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";
import { GoogleSpreadsheet } from "google-spreadsheet";

interface IData {
  docTitle: string;
  firstSheet: {
    title: string;
    index: number;
    rowCount: number;
    names: string[];
    emails: string[];
  };
}

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<IData>
) {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  // google-workspace-code-playground/sheets1 on natankrasney@gmail.com
  const doc = new GoogleSpreadsheet(
    "1god9TP9YRgm3wGljfzjvLzq8UGlx395ZBZ5r90E9-6M"
  );

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL!,
    private_key: process.env.GOOGLE_PRIVATE_KEY!,
  });

  await doc.loadInfo(); // loads document properties and worksheets

  const firstSheet = doc.sheetsByIndex[0]; // or use doc.sheetsById[id] or doc.sheetsByTitle[title]

  // read rows
  const firstSheetRows = await firstSheet.getRows();

  // read/write row values

  res.status(200).json({
    docTitle: doc.title,
    firstSheet: {
      title: firstSheet.title,
      index: firstSheet.index,
      rowCount: firstSheet.rowCount,
      names: [firstSheetRows[0].name, firstSheetRows[1].name],
      emails: [firstSheetRows[0].email, firstSheetRows[1].email],
    },
  });
}
